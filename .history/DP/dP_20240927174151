# https://www.acmicpc.net/problem/1149

def dp(n):
    # 1. 테이블 정의
    d = [[0] * 3 for _ in range(n+1)]

    # 2. 점화식
    # D[k][0] = min(D[k-1][1], D[k-1][2]) + R[k]
    # D[k][1] = min(D[k-1][2], D[k-1][0]) + G[k]
    # D[k][2] = min(D[k-1][1], D[k-1][0]) + B[k]

    # 3. 초기값
    d[1][0] = r[1]
    d[1][1] = g[1]
    d[1][2] = b[1]

    # 점화식
    for i in range(2, n+1):
        d[i][0] = min(d[i-1][1], d[i-1][2]) + r[i]
        d[i][1] = min(d[i-1][0], d[i-1][2]) + g[i]
        d[i][2] = min(d[i-1][0], d[i-1][1]) + b[i]

    return min(d[i][0], d[i][1], d[i][2])
    


# 입력
n = int(input())
r = [0] * (n+1)
g = [0] * (n+1)
b = [0] * (n+1)

for i in range(1, n+1):
    # r.append()로 값을 넣는 방법은 계속해서 메모리 재할당이 일어난다.
    r[i], g[i], b[i] = map(int, input().split())

print(dp(n))
        